{
  "pipelineSpec": {
    "components": {
      "comp-postprocess": {
        "executorLabel": "exec-postprocess",
        "inputDefinitions": {
          "parameters": {
            "file_bucket": {
              "type": "STRING"
            },
            "hs_nba_utils_path": {
              "type": "STRING"
            },
            "model_type": {
              "type": "STRING"
            },
            "output_dataset_id": {
              "type": "STRING"
            },
            "pipeline_path": {
              "type": "STRING"
            },
            "pipeline_type": {
              "type": "STRING"
            },
            "project_id": {
              "type": "STRING"
            },
            "resource_bucket": {
              "type": "STRING"
            },
            "score_table_id": {
              "type": "STRING"
            },
            "stack_name": {
              "type": "STRING"
            },
            "token": {
              "type": "STRING"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-postprocess": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "postprocess"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.18' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef postprocess(\n    project_id: str,\n    output_dataset_id: str,\n    score_table_id: str,\n    resource_bucket: str,\n    file_bucket: str,\n    stack_name: str,\n    model_type: str,\n    pipeline_type: str,\n    pipeline_path: str,\n    hs_nba_utils_path: str, \n    token: str\n    ):\n    \"\"\"\n    Postprocess data for a machine learning pipeline.\n    \"\"\"\n\n    # import global modules\n    from google.cloud import storage\n    from pathlib import Path\n    from yaml import safe_load\n    import sys\n    import os\n    import pandas as pd\n\n    # set global vars\n    pth_project = Path(os.getcwd())\n    pth_model_config = pth_project / 'model_config.yaml'\n    pth_queries = pth_project / 'queries'\n    sys.path.insert(0, pth_project.as_posix())\n\n    # init gcp clients\n    storage_client = storage.Client()\n\n    def extract_dir_from_bucket(\n        bucket: Any, local_path: Path, prefix: str, split_prefix: str = 'serving_pipeline' \n    ):    \n        \"\"\"\n        Download files from a specified bucket to a local path, excluding a specified prefix.\n\n        Parameters:\n        - bucket: The bucket object from which to download files.\n        - local_path: The local path where the files will be downloaded to.\n        - prefix: The prefix to filter the files in the bucket. Only files with this prefix will be downloaded.\n        - split_prefix: The prefix to exclude from the downloaded file paths. Default is 'serving_pipeline'.\n        \"\"\"\n        for blob in bucket.list_blobs(prefix=prefix):\n            if not blob.name.endswith(\"/\"):\n                path = local_path / blob.name.split(f'{split_prefix}/')[-1]\n                str_path = path.as_posix()\n                Path(str_path[:str_path.rindex('/')]).mkdir(parents=True, exist_ok=True)\n                blob.download_to_filename(str_path)\n\n    # download utils and model config locally\n    storage_client = storage.Client()\n    bucket = storage_client.bucket(resource_bucket)\n    extract_dir_from_bucket(\n        bucket, pth_project, f'{stack_name}/{hs_nba_utils_path}', split_prefix='notebook'\n    )\n    extract_dir_from_bucket(\n        bucket, pth_project, f'{stack_name}/{pipeline_path}/queries'\n    )\n    blob = bucket.blob(f'{stack_name}/{pipeline_path}/model_config.yaml')\n    blob.download_to_filename(pth_model_config)\n\n    # import local modules\n    from hs_nba_utils.etl.load import create_temp_table, insert_from_temp_table\n\n    # load model config\n    d_model_config = safe_load(pth_model_config.open())\n\n   # load data from bucket\n    df_scores = pd.read_csv(f'gs://{file_bucket}/{pipeline_type}/df_score.csv')\n\n    print(f'Scores df.shape {df_scores.shape}')\n\n    # insert model id and and set unavailable targets to None\n    df_scores['model_id'] = d_model_config['model_id']\n    l_unavailable_targets = d_model_config['unavailable_target_variables']\n    if l_unavailable_targets:\n        df_scores[l_unavailable_targets] = [None] * len(l_unavailable_targets)\n\n    # create temp table in bq\n    temp_table_name = create_temp_table(\n        project_id, output_dataset_id, score_table_id, df_scores\n    )\n\n    print(f'created a temp table {temp_table_name}')\n\n    # insert data from temp into main table\n    current_part_dt = str(df_scores['part_dt'].max())\n    insert_from_temp_table(\n        project_id, output_dataset_id, score_table_id, temp_table_name, current_part_dt,\n        pth_queries / 'drop_current_part_dt.sql', pth_queries / 'insert_from_temp_table.sql', token\n    )\n\n"
            ],
            "image": "northamerica-northeast1-docker.pkg.dev/cio-workbench-image-np-0ddefe/bi-platform/bi-aaaie/images/kfp-pycaret-slim:latest",
            "resources": {
              "cpuLimit": 4.0,
              "memoryLimit": 64.0
            }
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "hs-nba-prospects-serving-pipeline"
    },
    "root": {
      "dag": {
        "tasks": {
          "postprocess": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-postprocess"
            },
            "inputs": {
              "parameters": {
                "file_bucket": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "divg-groovyhoon-pr-d2eab4"
                    }
                  }
                },
                "hs_nba_utils_path": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "vertex_pipelines/hs_nba_utils/notebook"
                    }
                  }
                },
                "model_type": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "acquisition"
                    }
                  }
                },
                "output_dataset_id": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "telus_ffh_nba"
                    }
                  }
                },
                "pipeline_path": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "vertex_pipelines/hs_nba_prospects/serving_pipeline"
                    }
                  }
                },
                "pipeline_type": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "serving_pipeline"
                    }
                  }
                },
                "project_id": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "divg-groovyhoon-pr-d2eab4"
                    }
                  }
                },
                "resource_bucket": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "divg-groovyhoon-pr-d2eab4-default"
                    }
                  }
                },
                "score_table_id": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "bq_hs_nba_prospects_scores"
                    }
                  }
                },
                "stack_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "ffh_nba"
                    }
                  }
                },
                "token": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "ya29.a0AXooCgusmuqUfi2Kl1kXEExqwfnhCsjH0Ki8K0R5KAiJdUAZ4dViWKHH6602ExwAbbm3ViP9aF89J9pFt075zbFtd14hdnDIx7OnAdknLKOHJX0L8tFEVibZLgWrWtl1Xfc4olHRbmFDv0Y3zHLR5HzZ468-tWr5xEUaZm_t6waCgYKAYcSARISFQHGX2Mi3IRcBOH1p5YqgMrDsleBxw0177"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "postprocess"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "file_bucket": {
            "type": "STRING"
          },
          "project_id": {
            "type": "STRING"
          },
          "region": {
            "type": "STRING"
          },
          "resource_bucket": {
            "type": "STRING"
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.18"
  },
  "runtimeConfig": {
    "parameters": {
      "file_bucket": {
        "stringValue": "divg-groovyhoon-pr-d2eab4"
      },
      "project_id": {
        "stringValue": "divg-groovyhoon-pr-d2eab4"
      },
      "region": {
        "stringValue": "northamerica-northeast1"
      },
      "resource_bucket": {
        "stringValue": "divg-groovyhoon-pr-d2eab4-default"
      }
    }
  }
}